#!/usr/bin/env node

var config = require('../templates/config.json');
var cmd    = require('commander');
var fs     = require('fs');
var path   = require('path');
var pkg    = require('../package.json');
var ncp    = require('ncp').ncp;

var version = pkg.version;

cmd.version(version)
  .usage('[name] [dir]')
  .parse(process.argv);

console.log(cmd.args.length);
//console.log(__dirname);

if(cmd.args.length != 2) {
  cmd.help();
}

var name = cmd.args.shift();
var aux  = cmd.args.shift();
var dest = aux;


init();

// Util Functions

function init() {
  emptyDirectory(dest, function(empty) {
    if(empty) {
      createApp(dest);
    } else {
      abort('Destination path is not empty or!');
    }
  })
}

function createApp(dest) {
  // moving base
  ncp(path.join(__dirname, '..', 'templates', 'app'), dest, function() {

    // create README.md
    confRead();

    // create package.json
    confPkg();

    // create .gitignore
    confIgnr();

    // move gulp
    confGulp();

  });
}

// dojojs generator helpers
function confRead() {
  var readme = fs.readFileSync(path.join(__dirname, '..', 'templates', '_README'));
  readme = readme.toString().replace('{dojo_name}', name);

  createFile('README.md', readme);
}

function confPkg() {
  var pkt = {};
  pkt.name = name;
  pkt.version = pkg.version;
  pkt.description = "";
  pkt.scripts = config.scripts;
  pkt.dependencies = config.deps;

  createFile('package.json', JSON.stringify(pkt, null, 2));
}

function confGulp() {
  fs.createReadStream(path.join(__dirname, '..', 'templates', '_Gulpfile')).pipe(fs.createWriteStream(path.join(dest, 'Gulpfile.js')));
}

function confIgnr() {
  createFile('.gitignore', config.ignore.join('\n'));
}


function createFile(file, data) {
  fs.writeFileSync(path.join(dest,file), data, {flags:'w+'}, name);
}

// express generator helpers

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */
function abort(str) {
  console.error(str);
  process.exit(1);
}
